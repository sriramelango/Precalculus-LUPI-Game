# -*- coding: utf-8 -*-
"""ARIMA Model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T6E7IDRsdLPG1Cmn-JAQOBeXxpEqGUxS

#Arima Model Math Data Analysis

**In statistics and econometrics, and in particular in time series analysis, an autoregressive integrated moving average (ARIMA) model is a generalization of an autoregressive moving average (ARMA) model. Both of these models are fitted to time series data either to better understand the data or to predict future points in the series (forecasting).**
"""

!pip install pmdarima

"""*Note: You can change the Round to Dates, but if you do, all hell breaks loose since all of the end data was collected on one day*"""

import pmdarima as pm
from pmdarima.model_selection import train_test_split
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset = pd.read_csv('./mathData.csv')
dataSetProcess = dataset[['Lowest_Possible', 'Round']]
dataSetProcess = dataSetProcess.set_index(['Round'])

"""#Predicting Existing Values"""

train, test = train_test_split(dataSetProcess, train_size=50)
testSize = len(test)
plt.plot(train)
plt.plot(test)

model= pm.auto_arima(train,start_p=0,d=1,start_q=0,
          max_p=5,max_d=5,max_q=5, start_P=0,
          D=1, start_Q=0, max_P=5,max_D=5,
          max_Q=5, m=12, seasonal=True,
          error_action='warn',trace=True,
          supress_warnings=True,stepwise=True,
          random_state=20,n_fits=50)

prediction = pd.DataFrame(model.predict(n_periods = testSize))
prediction = prediction.set_index(test.index)
print(prediction)

plt.figure(figsize=(30,10))
plt.plot(train,label="Training")
plt.plot(test,label="Test")
plt.plot(prediction,label="Predicted")
plt.legend(loc = 'upper left')
plt.savefig('SecondPrection.jpg')
plt.show()

"""#Predicting Future Values"""

train = dataSetProcess

model= pm.auto_arima(train,start_p=0,d=1,start_q=0,
          max_p=5,max_d=5,max_q=5, start_P=0,
          D=1, start_Q=0, max_P=5,max_D=5,
          max_Q=5, m=12, seasonal=True,
          error_action='warn',trace=True,
          supress_warnings=True,stepwise=True,
          random_state=20,n_fits=50)

futureInterval = int(input("How many rounds in the future? "))
print(test.index)
prediction = pd.DataFrame(model.predict(n_periods = futureInterval))
array = []
for i in range(97,97+futureInterval):
  array.append(i)
prediction = prediction.set_index(np.array(array))
print(prediction)

plt.figure(figsize=(30,10))
plt.plot(train,label="Training")
plt.plot(prediction,label="Predicted")
plt.legend(loc = 'upper left')
plt.savefig('SecondPrection.jpg')
plt.show()

"""#Using Optimal Data"""

optimalDataSet = dataset[['Lowest_Possible', 'Round']].tail(49)
index = []
for i in range(49):
  index.append(i)

optimalDataSet['Round'] = index
optimalDataSet = optimalDataSet.set_index(['Round'])
print(optimalDataSet)

model= pm.auto_arima(optimalDataSet,start_p=0,d=1,start_q=0,
          max_p=5,max_d=5,max_q=5, start_P=0,
          D=1, start_Q=0, max_P=5,max_D=5,
          max_Q=5, m=12, seasonal=True,
          error_action='warn',trace=True,
          supress_warnings=True,stepwise=True,
          random_state=20,n_fits=50)

futureInterval = int(input("How many rounds in the future? "))
prediction = pd.DataFrame(model.predict(n_periods = futureInterval))
array = []
for i in range(48,48+futureInterval):
  array.append(i)
prediction = prediction.set_index(np.array(array))
print(prediction)

plt.figure(figsize=(30,10))
plt.plot(optimalDataSet,label="Training")
plt.plot(prediction,label="Predicted")
plt.legend(loc = 'upper left')
plt.savefig('SecondPrection.jpg')
plt.show()